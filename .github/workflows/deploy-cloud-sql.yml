name: Deploy Cloud SQL PostgreSQL (Optimizado)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'
          access_token_lifetime: '3600s'

      - name: Setup gcloud with caching
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: your-gcp-project-id
          install_components: 'beta'
          cache_components: true

      - name: Create Cloud SQL Instance and VPC in Parallel
        run: |
          set -e  # Habilitar fallo inmediato si hay errores

          # Verificar si los recursos ya existen
          INSTANCE_EXISTS=$(gcloud sql instances list --filter="name=postgres" --format="value(name)") &
          VPC_EXISTS=$(gcloud compute networks vpc-access connectors list --region=us-central1 --filter="name=orders-vpc-connector" --format="value(name)") &
          wait

          # Crear Cloud SQL y VPC en paralelo
          ERRORS=()  # Array para almacenar errores

          if [ -z "$INSTANCE_EXISTS" ]; then
            echo "Creating Cloud SQL instance..."
            gcloud sql instances create postgres \
              --database-version=POSTGRES_16 \
              --tier=db-f1-micro \
              --region=us-central1 \
              --root-password=postgres \
              --storage-size=10GB \
              --assign-ip \
              --network=default \
              --authorized-networks=0.0.0.0/0 \
              --edition=enterprise \
              --availability-type=zonal &
            SQL_PID=$!
          else
            echo "Cloud SQL instance already exists."
          fi

          if [ -z "$VPC_EXISTS" ]; then
            echo "Creating VPC Connector..."
            gcloud compute networks vpc-access connectors create orders-vpc-connector \
              --region=us-central1 \
              --network=default \
              --range=10.8.0.0/28 &
            VPC_PID=$!
          else
            echo "VPC Connector already exists."
          fi

          # Esperar finalización y capturar errores
          wait $SQL_PID || ERRORS+=("Cloud SQL instance creation failed")
          wait $VPC_PID || ERRORS+=("VPC Connector creation failed")

          # Mostrar errores si hubo
          if [ ${#ERRORS[@]} -ne 0 ]; then
            printf "%s\n" "${ERRORS[@]}"
            exit 1
          fi

          # Confirmar que la instancia Cloud SQL está lista antes de continuar
          echo "Waiting for Cloud SQL instance to be ready..."
          gcloud sql instances describe postgres --format="value(state)" | grep -q "RUNNABLE"

      - name: Create Databases in Parallel
        run: |
          set -e  # Habilitar fallo inmediato si hay errores

          EXISTING_DBS=$(gcloud sql databases list --instance=postgres --format="value(name)")
          DATABASES=("orders" "products" "users" "manufacturers" "customers" "ai")

          ERRORS=()  # Array para almacenar errores

          for DB in "${DATABASES[@]}"; do
            if echo "$EXISTING_DBS" | grep -qw "$DB"; then
              echo "Database '$DB' exists, skipping."
            else
              echo "Creating database '$DB'..."
              gcloud sql databases create "$DB" --instance=postgres --async &
              PIDS+=($!)
            fi
          done

          # Esperar finalización y capturar errores
          for PID in "${PIDS[@]}"; do
            wait $PID || ERRORS+=("Database creation failed")
          done

          # Mostrar errores si hubo
          if [ ${#ERRORS[@]} -ne 0 ]; then
            printf "%s\n" "${ERRORS[@]}"
            exit 1
          fi
