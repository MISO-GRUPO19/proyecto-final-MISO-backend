name: Deploy Cloud SQL PostgreSQL

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: your-gcp-project-id

      - name: Create Cloud SQL Instance and VPC in Parallel
        run: |
          set -e  # Habilitar fallo inmediato si hay errores

          # Verificar si los recursos ya existen
          INSTANCE_EXISTS=$(gcloud sql instances list --filter="name=postgres" --format="value(name)") &
          VPC_EXISTS=$(gcloud compute networks vpc-access connectors list --region=us-central1 --filter="name=orders-vpc-connector" --format="value(name)") &
          wait

          # Crear Cloud SQL y VPC en paralelo
          ERRORS=()  # Array para almacenar errores

          if [ -z "$INSTANCE_EXISTS" ]; then
            echo "Creating Cloud SQL instance..."
            gcloud sql instances create postgres \
              --database-version=POSTGRES_16 \
              --tier=db-perf-optimized-N-16 \
              --region=us-central1 \
              --root-password=postgres \
              --storage-size=10GB \
              --assign-ip \
              --network=default \
              --authorized-networks=0.0.0.0/0 \
              --availability-type=zonal &
            SQL_PID=$!
          else
            echo "Cloud SQL instance already exists."
          fi

          if [ -z "$VPC_EXISTS" ]; then
            echo "Creating VPC Connector..."
            gcloud compute networks vpc-access connectors create orders-vpc-connector \
              --region=us-central1 \
              --network=default \
              --range=10.8.0.0/28 &
            VPC_PID=$!
          else
            echo "VPC Connector already exists."
          fi

          # Esperar finalizaci칩n y capturar errores
          wait $SQL_PID || ERRORS+=("Cloud SQL instance creation failed")
          wait $VPC_PID || ERRORS+=("VPC Connector creation failed")

          # Mostrar errores si hubo
          if [ ${#ERRORS[@]} -ne 0 ]; then
            printf "%s\n" "${ERRORS[@]}"
            exit 1
          fi

          # Confirmar que la instancia Cloud SQL est치 lista antes de continuar
          echo "Waiting for Cloud SQL instance to be ready..."
          gcloud sql instances describe postgres --format="value(state)" | grep -q "RUNNABLE"

      - name: Patch Cloud SQL flags
        run: |
          gcloud sql instances patch postgres \
            --database-flags="idle_in_transaction_session_timeout=60000,cloudsql.enable_pgaudit=on,pgaudit.log=all" \
            --project=proyecto-final-451719 \
            --quiet
      
          echo "Restarting Cloud SQL instance to apply changes..."
          gcloud sql instances restart postgres \
            --project=proyecto-final-451719 \
            --quiet
      
          echo "Waiting for instance to be RUNNABLE..."
          until [[ "$(gcloud sql instances describe postgres --project=proyecto-final-451719 --format='value(state)')" == "RUNNABLE" ]]; do
            echo "Instance not ready yet, waiting..."
            sleep 10
          done
          
      - name: Create Databases in Parallel
        run: |
          set -e  # Habilitar fallo inmediato si hay errores

          PROJECT_ID="proyecto-final-451719"
          INSTANCE_NAME="postgres"
          DATABASES=("orders" "products" "users" "manufacturers" "customers" "ai")

          for DB in "${DATABASES[@]}"; do
            echo "Creando base de datos '$DB'..."
            
            while true; do
              STATUS=$(gcloud sql operations list --instance="$INSTANCE_NAME" --project="$PROJECT_ID" --filter="status!=DONE" --format="value(name)")

              if [ -z "$STATUS" ]; then
                gcloud sql databases create "$DB" --instance="$INSTANCE_NAME" --project="$PROJECT_ID"
                echo "Base de datos '$DB' creada."
                break
              else
                echo "Otra operaci칩n est치 en curso, esperando..."
                sleep 10  # Esperar antes de volver a intentar
              fi
            done
          done
